{"version":3,"sources":["logo.svg","LeftPanel.js","Diagram.js","ContentAdmin.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LeftPanel","event","content","target","style","display","border","console","log","dataTransfer","setData","JSON","stringify","idContent","category","state","url","xpath","_this","this","Meta","Card","react_default","a","createElement","className","props","data","map","index","key","draggable","onDragStart","e","onContentDragStart","onDragEnd","onContentDragEnd","card","width","title","description","React","Component","goObj","go","GraphObject","make","GoJs","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","renderCanvas","bind","assertThisInitialized","orderedNodes","contents","links","myModel","myDiagram","contentsToSend","loading","onDiagramEnter","onDiagramDrop","onDragOver","sendData","Node","Binding","Shape","portId","fromLinkable","toLinkable","toMaxLinks","fromMaxLinks","toLinkableSelfNode","TextBlock","margin","font","Link","curve","Bezier","relinkableFrom","relinkableTo","toArrow","fill","_this2","model","TreeModel","diagram","Diagram","refs","goJsDiv","initialContentAlignment","Spot","Center","addDiagramListener","ev","push","from","subject","fromNode","to","toNode","setState","setModelAndDiagram","_this3","primero","filter","link","idcontent","length","contenidos","contentCopy","assign","_this4","reorderNodes","axios","put","then","div","_this5","primerNodo","lastNodo","_loop","properLink","processContents","_this6","linksArray","newLink","prevProps","nodeDataArray","generateLinksArray","GraphLinksModel","nodeTemplate","generateNodeTemplate","linkTemplate","generateLinkTemplate","validCycle","CycleDestinationTree","preventDefault","content1","content2","content3","content4","content5","parsedContent1","parse","parsedContent2","parsedContent3","parsedContent4","parsedContent5","objectSpread","window","PIXELRATIO","computePixelRatio","pixelratio","can","HTMLCanvasElement","bbox","getBoundingClientRect","bbw","bbh","height","mx","clientX","left","my","clientY","top","point","transformViewToDoc","Point","startTransaction","addNodeData","location","getContentStructure","items","type","color","Brush","randomColor","commitTransaction","stopPropagation","spin","size","onDragEnter","onDrop","ref","backgroundColor","es_button","onClick","defaultProps","ContentAdmin","confirmedContents","get","response","Header","Layout","Sider","Content","layout","LeftPanel_LeftPanel","Diagram_GoJs","updateContents","orderedContents","App","ContentAdmin_ContentAdmin","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.352e4958.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport { Card, Icon, Avatar } from 'antd';\r\n\r\nexport default class LeftPanel extends React.Component {\r\n\r\n  onContentDragEnd(event,content){\r\n     // reset the border of the dragged element\r\n     event.target.style.display = \"none\"\r\n     event.target.style.border = \"\";\r\n  }\r\n\r\n  onContentDragStart(event,content){\r\n    console.log(content)\r\n    event.dataTransfer.setData(JSON.stringify({idContent:content.idContent}), 'idContent');\r\n    event.dataTransfer.setData(JSON.stringify({category:content.category}), 'category');\r\n    event.dataTransfer.setData(JSON.stringify({state:content.state}), 'state');\r\n    event.dataTransfer.setData(JSON.stringify({url:content.url}), 'url');\r\n    event.dataTransfer.setData(JSON.stringify({xpath:content.xpath}), 'xpath');    \r\n    // store a reference to the dragged element\r\n    let dragged = event.target;\r\n    // Objects during drag will have a red border\r\n    event.target.style.border = \"2px solid red\";\r\n  }\r\n\r\n  render(){\r\n    const { Meta } = Card;\r\n    return(\r\n      <div className=\"no-assigned__cards__container\">\r\n        {this.props.data && this.props.data.map( (content, index) => {\r\n          return(\r\n            <div \r\n            key={index}\r\n            draggable=\"true\" \r\n            onDragStart={(e) => this.onContentDragStart(e,content)}\r\n            onDragEnd={(e) => this.onContentDragEnd(e,content)}>\r\n              <Card\r\n              style={{ width:\"80%\" }}\r\n                >\r\n                  <Meta\r\n                    title={content.idContent}\r\n                    description={content.category}\r\n                    // title={content.title.text}\r\n                    // description={content.link.text}\r\n                  />\r\n              </Card>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}","import React, {Component} from 'react';\r\nimport go from 'gojs';\r\nimport {Button, Spin} from 'antd'\r\nimport axios from 'axios'\r\nconst goObj = go.GraphObject.make;\r\n\r\nexport default class GoJs extends Component {\r\n\r\n  constructor (props) {\r\n    super (props);\r\n    this.renderCanvas = this.renderCanvas.bind (this);\r\n    this.state = {\r\n      orderedNodes: [],\r\n      contents:[],\r\n      links:[],\r\n      myModel: null, \r\n      myDiagram: null,\r\n      contentsToSend:[],\r\n      loading:false\r\n    }\r\n    this.onDiagramEnter = this.onDiagramEnter.bind(this)\r\n    this.onDiagramDrop = this.onDiagramDrop.bind(this)\r\n    this.onDragOver = this.onDragOver.bind(this)\r\n    this.sendData = this.sendData.bind(this)\r\n    this.renderCanvas = this.renderCanvas.bind(this)\r\n\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.renderCanvas ();\r\n  }\r\n\r\n  generateNodeTemplate(){\r\n    let nodeTemplate = goObj(\r\n      go.Node,\r\n     \"Auto\",\r\n      new go.Binding('location'),\r\n      goObj(\r\n        go.Shape, \"RoundedRectangle\",\r\n        {\r\n          portId: \"\", \r\n          fromLinkable: true, \r\n          toLinkable: true,\r\n          toMaxLinks:1,\r\n          fromMaxLinks:1,\r\n          toLinkableSelfNode: false\r\n        },\r\n        new go.Binding(\"fill\", \"color\")\r\n      ),\r\n      goObj(\r\n        go.TextBlock,\r\n        { margin: 6, font: \"18px sans-serif\" },\r\n        new go.Binding(\"text\", \"idContent\")\r\n      )\r\n    )\r\n    return nodeTemplate;    \r\n  }\r\n\r\n  generateLinkTemplate(){\r\n    let linkTemplate = goObj(go.Link,\r\n      { curve: go.Link.Bezier },\r\n      {relinkableFrom: true, relinkableTo: true},\r\n      goObj(go.Shape),  // the link shape\r\n      goObj(go.Shape,   // the arrowhead\r\n        { toArrow: \"OpenTriangle\", fill: null })\r\n    );\r\n    return linkTemplate\r\n  }\r\n\r\n\r\n  renderCanvas () {\r\n    let that = this\r\n    let model = goObj(go.TreeModel)\r\n    let diagram = goObj(go.Diagram, this.refs.goJsDiv, {initialContentAlignment: go.Spot.Center});\r\n    // DOUBLE CLICK EVENT LISTENER\r\n    // diagram.addDiagramListener(\"ObjectDoubleClicked\",  (ev) => {\r\n    //   console.log(ev); //Successfully logs the node you clicked.\r\n    //   console.log(ev.subject.part); //Successfully logs the node's name.\r\n    //   ev.diagram.model.addLinkData({from:ev.subject.part.key, to:ev.diagram.model.nodeDataArray[0].key})\r\n    //   console.log(ev.diagram.model.linkDataArray)\r\n    //   data.push(ev.subject.part.key)\r\n    //   console.log(data)\r\n    // });\r\n\r\n    diagram.addDiagramListener(\"LinkDrawn\", (ev) => {\r\n      // console.log(diagram.model.toJson());\r\n      let {links} = this.state\r\n      links.push({from:ev.subject.fromNode.data.idContent, to: ev.subject.toNode.data.idContent})\r\n      this.setState({links})\r\n      // this.reorderNodes()\r\n    })\r\n    this.setModelAndDiagram(model, diagram)\r\n  \r\n  }\r\n\r\n  primero(){\r\n    \r\n    let primero = this.state.contents.filter((content) => {\r\n      if (this.state.links.filter((link) => link.to == content.idcontent).length == 0)\r\n        return true\r\n    })\r\n    return primero[0]\r\n  }\r\n\r\n  processContents(contents){\r\n    let contenidos = []\r\n    // let contenidos = contents\r\n    contents.map((content)=> {\r\n      let contentCopy = Object.assign({},content)\r\n      let idContent = contentCopy.idcontent\r\n      delete contentCopy.idcontent\r\n      contentCopy.idContent = idContent\r\n      contentCopy.state = \"edited\"\r\n      contenidos.push(contentCopy)\r\n      console.log(contentCopy)\r\n    })\r\n    console.log(contenidos)\r\n    this.setState({\r\n      contentsToSend:contenidos\r\n    })\r\n    return contenidos\r\n  }\r\n\r\n  sendData(){\r\n    this.setState({\r\n      loading:true\r\n    })\r\n    let contentsToSend = this.reorderNodes()\r\n    axios.put('https://alexa-apirest.herokuapp.com/users/addContent/user/gonza', contentsToSend).then(() => {\r\n      this.setState({loading:false})\r\n      this.state.myDiagram.div = null\r\n      this.renderCanvas()\r\n    })\r\n  }\r\n\r\n  reorderNodes(){\r\n    \r\n    let primerNodo = this.primero()\r\n    let primerLink = this.state.links.filter( link => link.from == primerNodo.idcontent)\r\n    let orderedNodes = [primerNodo]\r\n    let lastNodo = primerNodo\r\n    for (let index = 0; index < this.state.links.length; index++) {\r\n      let properLink = this.state.links.filter( link => link.from == lastNodo.idcontent)[0]\r\n      lastNodo = this.state.contents.filter( content => content.idcontent == properLink.to)[0]\r\n      orderedNodes.push(lastNodo)\r\n    }\r\n    console.log(orderedNodes)\r\n    // this.processContents(orderedNodes)\r\n    // this.props.updateContents(orderedNodes)\r\n    // let contenidos = [] \r\n    // this.state.links.map( (link, index) => {\r\n    //   if (index != this.state.links.length - 1) {\r\n    //     contenidos.push(this.state.contents.filter( contenido => contenido.titletext == link.from )[0])\r\n    //   }\r\n    // })\r\n    // contenidos.push(this.state.contents.filter(contenido => contenido.titletext == this.state.links[this.state.links.length - 1].from)[0])\r\n    // contenidos.push(this.state.contents.filter(contenido => contenido.titletext == this.state.links[this.state.links.length - 1].to)[0])\r\n    // return contenidos\r\n    // console.log(orderedNodes)\r\n    return this.processContents(orderedNodes)\r\n  }\r\n\r\n\r\n  generateLinksArray(){\r\n    let linksArray = []\r\n    this.props.data.map((content, index) => {\r\n      if (index > 0) {\r\n        let newLink = {from:this.props.data[index - 1].key, to:content.key}\r\n        linksArray.push(newLink)\r\n      }\r\n    })\r\n    return linksArray\r\n  }\r\n\r\n  \r\n  componentWillUpdate (prevProps) { //se actualiza sólo cuando cambia la data\r\n    if (this.props.data !== prevProps.data) {\r\n      const model = this.state.myModel\r\n      const diagram = this.state.myDiagram\r\n      this.setModelAndDiagram(model, diagram)\r\n    }\r\n  }\r\n\r\n  setModelAndDiagram(model, diagram){\r\n    model.nodeDataArray = this.props.data\r\n    let linksArray = this.generateLinksArray()\r\n    diagram.model = new go.GraphLinksModel([],[]);\r\n    diagram.nodeTemplate = this.generateNodeTemplate()\r\n    diagram.linkTemplate = this.generateLinkTemplate()\r\n    diagram.validCycle = go.Diagram.CycleDestinationTree;\r\n    this.setState({\r\n      myModel: model, \r\n      myDiagram: diagram\r\n    })    \r\n  }\r\n  \r\n  onDiagramEnter(event){\r\n    event.preventDefault();\r\n      // Here you could also set effects on the Diagram,\r\n      // such as changing the background color to indicate an acceptable drop zone\r\n      // Requirement in some browsers, such as Internet Explorer\r\n  }\r\n\r\n  getContentStructure(content1,content2,content3,content4, content5){ //crea el content object\r\n    let parsedContent1 = JSON.parse(content1)\r\n    let parsedContent2 = JSON.parse(content2)\r\n    let parsedContent3 = JSON.parse(content3)\r\n    let parsedContent4 = JSON.parse(content4)\r\n    let parsedContent5 = JSON.parse(content5)\r\n    let content = ({...parsedContent1,...parsedContent2,...parsedContent3,...parsedContent4,...parsedContent5})\r\n    let contents = this.state.contents\r\n    contents.push(content)\r\n    this.setState({contents})\r\n    return content.idcontent\r\n    }\r\n\r\n\r\n  onDiagramDrop(event){\r\n    window.PIXELRATIO = this.state.myDiagram.computePixelRatio();\r\n    let pixelratio = window.PIXELRATIO;\r\n    let can = event.target;\r\n\r\n    // if the target is not the canvas, we may have trouble, so just quit:\r\n    if (!(can instanceof HTMLCanvasElement)) return;\r\n    let diagram = this.state.myDiagram\r\n    var bbox = can.getBoundingClientRect();\r\n    var bbw = bbox.width;\r\n    if (bbw === 0) bbw = 0.001;\r\n    var bbh = bbox.height;\r\n    if (bbh === 0) bbh = 0.001;\r\n    var mx = event.clientX - bbox.left * ((can.width/pixelratio) / bbw);\r\n    var my = event.clientY - bbox.top * ((can.height/pixelratio) / bbh);\r\n    var point = diagram.transformViewToDoc(new go.Point(mx, my));\r\n    diagram.startTransaction('new node');\r\n    diagram.model.addNodeData({\r\n      location: point,\r\n      idContent: this.getContentStructure(\r\n        event.dataTransfer.items[0].type, \r\n        event.dataTransfer.items[1].type, \r\n        event.dataTransfer.items[2].type, \r\n        event.dataTransfer.items[3].type,\r\n        event.dataTransfer.items[4].type),\r\n        color:go.Brush.randomColor()\r\n    });\r\n    diagram.commitTransaction('new node');\r\n    this.setState({\r\n      myDiagram:diagram,\r\n      myModel:diagram.model\r\n    })\r\n    // console.log(diagram.model.toJson());\r\n    // remove dragged element from its old location\r\n    // if (remove.checked) dragged.parentNode.removeChild(dragged);    \r\n  }\r\n\r\n  onDragOver(event){\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  }\r\n  \r\n  render () {\r\n    return(\r\n      <div>\r\n        {this.state.loading && \r\n          <div className=\"example\">\r\n            <Spin className=\"diagram-spin\" size=\"large\"/>\r\n          </div>\r\n        }\r\n        <div \r\n        onDragEnter={this.onDiagramEnter} \r\n        className=\"diagram\"\r\n        onDrop={this.onDiagramDrop}\r\n        onDragOver={this.onDragOver}\r\n        >\r\n          <div  ref=\"goJsDiv\" style={{\r\n              'width': '100%',\r\n              'height': '874px', \r\n              'backgroundColor': \"white\"\r\n            }}>\r\n          </div>\r\n          <div className=\"watermark__cover\">\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <Button className=\"sendButton\" onClick={this.sendData}>Enviar contenidos</Button>\r\n      </div>\r\n      </div>\r\n    ) \r\n  }\r\n}\r\n\r\nGoJs.defaultProps = { data: '[]' };","import React from 'react'\r\nimport {Card, List, Icon, Layout} from 'antd'\r\nimport LeftPanel from './LeftPanel'\r\n// import RightPanel from './RightPanel'\r\nimport Diagram from './Diagram'\r\nimport go from 'gojs';\r\nimport axios from 'axios'\r\n\r\nexport default class ContentAdmin extends React.Component{\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      confirmedContents: []\r\n    }\r\n  }\r\n\r\n  componentWillMount(){\r\n    axios.get(\"https://alexa-apirest.herokuapp.com/users/noticesByState/new/gonza\").then( (response) => {\r\n      this.setState({confirmedContents:response.data})\r\n      console.log(response)})\r\n  }\r\n\r\n  render(){\r\n\r\n    const {Header, Sider, Content} = Layout;\r\n    \r\n    return(\r\n      <div>\r\n        <Layout style={{height:\"1000px\"}}>\r\n        <Sider>\r\n          <LeftPanel data={this.state.confirmedContents}/>\r\n        </Sider>\r\n        <Layout>\r\n          <Header>Header</Header>\r\n          <Content>\r\n            <Diagram \r\n              data={this.state.confirmedContents.map(\r\n                (content) => { return{key:content.url, color:go.Brush.randomColor()}}\r\n              )}\r\n              updateContents={ orderedContents => this.processContents(orderedContents)}\r\n              />\r\n            </Content>\r\n        </Layout>\r\n        <Sider>\r\n          {/* <RightPanel sendData={() => this.sendData()}/> */}\r\n        </Sider>\r\n        </Layout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\nimport ContentAdmin from './ContentAdmin';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'antd/dist/antd.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ContentAdmin/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}